<h1>Contacts</h1>

<h2>Add New Contact</h2>
<form id="new-contact-form">
  <input type="text" name="firstName" placeholder="First Name" required />
  <input type="text" name="lastName" placeholder="Last Name" required />
  <input type="text" name="phoneNumber" placeholder="Phone Number" required />
  <input type="text" name="address" placeholder="Address" required />
  <button type="submit">Add Contact</button>
</form>

<h2>Contacts</h2>
<table border="1" cellpadding="5" cellspacing="0">
  <thead>
    <tr>
      <th>ID</th>
      <th>First Name</th>
      <th>Last Name</th>
      <th>Phone Number</th>
      <th>Address</th>
    </tr>
  </thead>
  <tbody id="contacts-table-body">
    {{#each contacts}}
    <tr data-id="{{id}}">
      <td>{{id}}</td>
      <td class="firstName">{{firstName}}</td>
      <td class="lastName">{{lastName}}</td>
      <td class="phoneNumber">{{phoneNumber}}</td>
      <td class="address">{{address}}</td>
      <td>
        <button class="edit-btn">Edit</button>
        <button class="delete-btn">Delete</button>
        <button class="save-btn" style="display:none;">Save</button>
        <button class="cancel-btn" style="display:none;">Cancel</button>
      </td>
    </tr>
    {{/each}}
  </tbody>
</table>

<script>
  async function fetchJSON(url, options) {
    const res = await fetch(url, options);
    if (!res.ok) throw new Error(await res.text());
    const contentType = res.headers.get('content-type') || '';
    if (contentType.includes('application/json')) {
      return res.json();
    }
    return null;
  }

  document.getElementById('new-contact-form').addEventListener('submit', async e => {
    e.preventDefault();
    const form = e.target;
    const data = {
      firstName: form.firstName.value.trim(),
      lastName: form.lastName.value.trim(),
      phoneNumber: form.phoneNumber.value.trim(),
      address: form.address.value.trim(),
    };
    try {
      const newContact = await fetchJSON('/contacts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      appendContactRow(newContact);
      form.reset();
    } catch (err) {
      alert('Error adding contact: ' + err.message);
    }
  });

  function appendContactRow(contact) {
    const tbody = document.getElementById('contacts-table-body');
    const tr = document.createElement('tr');
    tr.dataset.id = contact.id;
    tr.innerHTML = `
      <td>${contact.id}</td>
      <td class="firstName">${contact.firstName}</td>
      <td class="lastName">${contact.lastName}</td>
      <td class="phoneNumber">${contact.phoneNumber}</td>
      <td class="address">${contact.address}</td>
      <td>
        <button class="edit-btn">Edit</button>
        <button class="delete-btn">Delete</button>
        <button class="save-btn" style="display:none;">Save</button>
        <button class="cancel-btn" style="display:none;">Cancel</button>
      </td>
    `;
    tbody.appendChild(tr);
  }

  document.getElementById('contacts-table-body').addEventListener('click', async e => {
    const tr = e.target.closest('tr');
    if (!tr) return;
    const id = tr.dataset.id;

    if (e.target.classList.contains('edit-btn')) {
      toggleEdit(tr, true);
    } else if (e.target.classList.contains('cancel-btn')) {
      toggleEdit(tr, false);
    } else if (e.target.classList.contains('save-btn')) {
      const updatedData = {
        firstName: tr.querySelector('input[name="firstName"]').value.trim(),
        lastName: tr.querySelector('input[name="lastName"]').value.trim(),
        phoneNumber: tr.querySelector('input[name="phoneNumber"]').value.trim(),
        address: tr.querySelector('input[name="address"]').value.trim(),
      };
      try {
        const updatedContact = await fetchJSON(`/contacts/${id}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedData),
        });
        updateRow(tr, updatedContact);
        toggleEdit(tr, false);
      } catch (err) {
        alert('Error updating contact: ' + err.message);
      }
    } else if (e.target.classList.contains('delete-btn')) {
      if (!confirm('Are you sure you want to delete this contact?')) return;
      try {
        await fetchJSON(`/contacts/${id}`, { method: 'DELETE' });
        tr.remove();
      } catch (err) {
        alert('Error deleting contact: ' + err.message);
      }
    }
  });

  function toggleEdit(tr, editing) {
    ['firstName', 'lastName', 'phoneNumber', 'address'].forEach(field => {
      const td = tr.querySelector(`td.${field}`);
      if (editing) {
        const val = td.textContent;
        td.innerHTML = `<input name="${field}" value="${val}" />`;
      } else {
        const input = td.querySelector('input');
        if (input) td.textContent = input.value;
      }
    });
    tr.querySelector('.edit-btn').style.display = editing ? 'none' : 'inline-block';
    tr.querySelector('.delete-btn').style.display = editing ? 'none' : 'inline-block';
    tr.querySelector('.save-btn').style.display = editing ? 'inline-block' : 'none';
    tr.querySelector('.cancel-btn').style.display = editing ? 'inline-block' : 'none';
  }

  function updateRow(tr, contact) {
    ['firstName', 'lastName', 'phoneNumber', 'address'].forEach(field => {
      const td = tr.querySelector(`td.${field}`);
      td.textContent = contact[field] || '';
    });
  }
</script>